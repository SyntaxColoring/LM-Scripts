#!/bin/bash
source "$(dirname "$0")/Common.sh"

# Everything needs to be compiled with the same architecture (32 or 64),
# or the toolchain will run into linker errors at runtime.
readonly TOOLCHAIN_MODEL=64

if [ $# -eq 0 ]; then
	echo "Usage:"
	echo "  $(basename "$0") [OPTIONS] DIRECTORY"
	echo "Synopsis:"
	echo "  Installs or updates the DMD compiler toolchain for the D programming"
	echo "  language.  Requires Git, a working C toolchain and GNU Make (which can all be"
	echo "  installed by running \"FakeInstall --Suggestions\")."
	echo "Arguments:"
	echo "  DIRECTORY  The root directory within which to install or update the three"
	echo "             components of the toolchain: Phobos, DRuntime and DMD."
	echo "Options:"
	echo "  --NoPATH       Do not automatically add the DMD executable directory to \$PATH."
	echo "  --FromScratch  Delete DIRECTORY and start over from a clean state.  This takes"
	echo "                 a while, but is sometimes necessary."
	echo "  --NoClean      Do not run \"make clean\" before pulling new sources.  This"
	echo "                 speeds up compilation, but can sometimes break updates.  If it"
	echo "                 does break an update, you will probably need to try again with"
	echo "                 the --FromScratch option."
else
	eval "$(OptionParser NoPATH FromScratch NoClean)"
	
	if [ $# -ne 1 ]; then
		Error "Expected exactly one argument, not counting options."
	else
		if [ $FromScratch ]; then
			echo -e "${GREEN}Deleting${RESET} $1..."
			rm -Rf $1
		fi
		
		mkdir -p "$1" # Create the target directory if it doesn't already exist (or if we just removed it).
		cd "$1"
		set "$(pwd)" # Makes $1 an absolute path.
		
		# Used by both the cleaning and compilation phases.
		readonly MakefileDirectories="dmd/src druntime phobos"
		
		if [ ! $NoClean ]; then
			# The reason that directories should be cleaned before being pulled is that
			# some commits modify the makefile.  This makes it possible for the old makefile
			# to create files that the new makefile does not know how to handle, which leads
			# to all kinds of nasty errors.
			for MakefileDirectory in $MakefileDirectories; do
				if [ -d $MakefileDirectory ]; then # Skip cleaning if the directory hasn't even been cloned yet.
					echo -e "${GREEN}Cleaning${RESET} contents of $MakefileDirectory..."
					cd $MakefileDirectory && make -f posix.mak clean && cd "$1"
				fi
			done
		fi
		
		for Component in dmd druntime phobos; do
			if [ -d $Component ]; then
				echo -e "${GREEN}Pulling${RESET} $Component..."
				cd $Component && git pull && cd "$1"
			else # Clone the repository if it doesn't already exist.
				echo -e "${GREEN}Cloning${RESET} $Component..."
				git clone http://github.com/D-Programming-Language/$Component
			fi
		done
		
		# The dmd.conf file is necessary for dmd to know where its dependencies are located.
		# It is responsible for specifying the locations of the runtime and standard library
		# binary and import files.
		echo -e "${GREEN}Generating${RESET} dmd.conf..."
		echo -e "; Automatically generated by UpdateD.\n[Environment]" > dmd/src/dmd.conf
		echo "DFLAGS=-I\"$1/druntime/import\" -I\"$1/phobos\" -L-L\"$1/phobos/generated/osx/release/$TOOLCHAIN_MODEL\"" >> dmd/src/dmd.conf
		
		OldPATH="$PATH" # Restored after compilation.
		PATH="$1/dmd/src:$PATH" # This is needed during the compilation phase because
		                        # a working D compiler is needed to compile Phobos.
		
		for MakefileDirectory in $MakefileDirectories; do
			echo -e "${GREEN}Compiling${RESET} contents of $MakefileDirectory..."
			cd $MakefileDirectory && make -f posix.mak "MODEL=$TOOLCHAIN_MODEL" && cd "$1"
		done
		
		echo -e "${GREEN}Done!${RESET}"
		
		# The proper directory is added to $PATH in ~/.profile LAST so that
		# the user can actually see the notification.  Otherwise, it would be
		# buried under a mountain of compiler barf.
		PATH="$OldPATH" # So AssertPATH only sees dmd/src in $PATH if it's already
		                # in ~/.profile.
		[ $NoPATH ] || AssertPATH "$1/dmd/src"
	fi
fi
